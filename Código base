//Exportar las librerías
#include <Servo.h>
#include <LiquidCrystal.h>

//Definir los servos
Servo base;
Servo LI;
Servo LD;
Servo garra;

//Definir los pines de los potenciómetros
int pot_base=A5;
int pot_LI=A4;
int pot_LD=A3;
int pot_garra=A2;

//Definir los botones y switch
const int btt_fwd= 4;
const int btt_bwd= 2;
const int modo= 7;

/*LiquidCrystal lcd();*/

//Prototipo de funciones
void movimiento (int valor1, int valor2, int valor3, int valor4);

//Definición de la función de movimiento general
void movimiento (int valor1, int valor2, int valor3, int valor4){ 
base.write(valor1);
LI.write(valor2); 
LD.write(valor3);
garra.write(valor4);
}



//definir estados
typedef enum estados {s0, s1, s2, s3, s4} estados;
estados estadoActual = s0;
estados estadoFuturo = s0;

void setup() {
/*// Configuración de filas y columnas de la pantalla
lcd.begin(16, 2);*/

//Configuracion de los servos
base.attach(11);
LI.attach(10);
LD.attach(9);
garra.attach(3):

//Configuracion de los pines
pinMode(btt_fwd, INPUT);
pinMode(btt_bwd, INPUT);
pinMode(modo, INPUT);

val_base = map(analogRead(pot_base),0,1023,0,180); 
val_LI = map(analogRead(pot_LI),0,1023,0,180); 
val_LD = map(analogRead(pot_LD),0,1023,0,180); 
val_garra = map(analogRead(pot_garra),0,1023,0,180);
}

void loop() {
bool avance = digitalRead(btt_fwd);
bool retroceso = digitalRead(btt_bwd);
bool mode = digitalRead(modo);


switch (estadoActual){
    case s0: 
      if(mode==HIGH)
        estadoFuturo = s1;
      else
        estadoFuturo = s0;
      break;
    case s1:
       if(mode==LOW)
        estadoFuturo = s0;
       if(avance==HIGH)
        estadoFuturo = s2;
      break;
    case s2:
      if(mode==LOW)
        estadoFuturo = s0;   
      if(avance==HIGH)
        estadoFuturo = s3;
       if(retroceso==HIGH)
        estadoFuturo = s1;
      break;
     case s3:
      if(mode==LOW)
        estadoFuturo = s0;   
      if(avance==HIGH)
        estadoFuturo = s4;
      if(retroceso==HIGH)
        estadoFuturo = s2;
      break;
     case s4:
      if(mode==LOW)
        estadoFuturo = s0;   
      if(avance==HIGH)
        estadoFuturo = s5;
      if(retroceso==HIGH)
        estadoFuturo = s3;
      break;
     case s5:
      if(mode==LOW)
        estadoFuturo = s0;   
      if(avance==HIGH)
        estadoFuturo = s1;
       if(retroceso==HIGH)
        estadoFuturo = s4;
       break;
  }

//Control de salidas según el estado actual
  switch (estadoActual){
    case s0:
      movimiento (val_base, val_LI, val_LD, val_garra);
      Serial.println("Posición del servo de la base:"val_base);
      Serial.println("Posición del servo del lado izquierdo:"val_LI);
      Serial.println("Posición del servo del lado derecho:"val_LD);
      Serial.println("Posición del servo de la garra:"val_garra);
      break;
    case s1: 
      movimiento (10, 30, 30, 100);
      Serial.println("Posición del servo de la base:"val_base);
      Serial.println("Posición del servo del lado izquierdo:"val_LI);
      Serial.println("Posición del servo del lado derecho:"val_LD);
      Serial.println("Posición del servo de la garra:"val_garra);
      break;
  }


}
